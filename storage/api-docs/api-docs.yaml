swagger: "2.0"
info:
  title: Apartment API Documentation
  description: Apartment API Documentation
  version: 1.0.0
paths:
  /api/apartment:
    get:
      tags:
        - Apartment
      summary: 'Get list Apartment'
      description: 'Get list Apartment'
      produces:
        - application/json
      responses:
        '200':
          description: A list of apartments.
          schema:
            type: object
            properties:
              is_success:
                type: boolean
                example: true
              message:
                type: string
                example: ''
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Apartment'
  /api/apartment/{id}:
    get:
      tags:
        - Apartment
      summary: 'Get Apartment by Id'
      description: 'Get Apartment by Id'
      produces:
        - application/json
      parameters:
      - name: "id"
        in: "path"
        description: "ID of apartment"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: Apartment by Id.
          schema:
            type: object
            properties:
              is_success:
                type: boolean
                example: true
              message:
                type: string
                example: ''
              data:
                type: array
                items:
                  $ref: ''
  /api/apartment/{id}/finance:
    get:
      tags:
        - Apartment
      summary: 'Get finance of apartment by Id'
      description: 'Get finance of apartment by Id'
      produces:
        - application/json
      parameters:
      - name: "id"
        in: "path"
        description: "ID of apartment"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: Finance of apartment by Id.
          schema:
            type: object
            properties:
              is_success:
                type: boolean
                example: true
              message:
                type: string
                example: ''
              data:
                type: array
                items:
                  $ref: ''
  /api/apartment/{id}/finance/{bill_id}/bill_detail:
    get:
      tags:
        - Apartment
      summary: 'Get bill detail by Apartment Id'
      description: 'Get bill detail by Apartment Id'
      produces:
        - application/json
      parameters:
      - name: "id"
        in: "path"
        description: "ID of Apartment"
        required: true
        type: "integer"
        format: "int64"
      - name: "bill_id"
        in: "path"
        description: "ID of Bill"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: Bill detail by Apartment Id.
          schema:
            type: object
            properties:
              is_success:
                type: boolean
                example: true
              message:
                type: string
                example: ''
              data:
                type: array
                items:
                  $ref: ''
  /api/service:
    get:
      tags:
        - Service
      summary: 'Get list Service'
      description: 'Get list Service'
      produces:
        - application/json
      responses:
        '200':
          description: A list of services.
          schema:
            type: object
            properties:
              is_success:
                type: boolean
                example: true
              message:
                type: string
                example: ''
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
  /api/service/add:
    post:
      tags:
        - Service
      summary: 'Add a new service'
      description: 'Add a new service'
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          description: "Service object that needs to be added to the system"
          required: true
          schema:
            $ref: "#/components/schemas/NewService"
      responses:
        '200':
          description: Add a new service.
          schema:
            type: object
            properties:
              is_success:
                type: boolean
                example: true
              message:
                type: string
                example: ''
              data:
                type: array
                items:
                  $ref: '#/components/schemas/NewService'
        '405':
          description: "Invalid input"
  /api/bill_detail:
    get:
      tags:
        - Bill Detail
      summary: 'Get list Bill Detail'
      description: 'Get list Bill Detail'
      produces:
        - application/json
      responses:
        '200':
          description: A list of bill details.
          schema:
            type: object
            properties:
              is_success:
                type: boolean
                example: true
              message:
                type: string
                example: ''
              data:
                type: array
                items:
                  $ref: ''
  /api/bill_detail/{id}:
    get:
      tags:
        - Bill Detail
      summary: 'Get Bill Detail by Id'
      description: 'Get Bill Detail by Id'
      produces:
        - application/json
      parameters:
      - name: "id"
        in: "path"
        description: "ID of Bill Detail"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: Bill detail by Id.
          schema:
            type: object
            properties:
              is_success:
                type: boolean
                example: true
              message:
                type: string
                example: ''
              data:
                type: array
                items:
                  $ref: ''
  /api/login:
    post:
      tags:
        - Authenticate
      summary: 'Login into the system'
      description: 'Login'
      produces:
        - application/json
      parameters:
        - name: "username"
          in: "query"
          description: "Type your username"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "Type your Password"
          required: true
          type: "string"
      responses:
        '200':
          description: Login successfully.
          schema:
            type: object
            properties:
              is_success:
                type: boolean
                example: true
              message:
                type: string
                example: ''
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Login'
        '400':
          description: "Error: Bad Request"
          schema:
            type: object
            properties:
              is_success:
                type: boolean
                example: false
              message:
                type: string
                example: ""
              data:
                type: array
                items:
                  $ref: '#/components/schemas/LoginFail'
  /api/register:
    post:
      tags:
        - Authenticate
      summary: 'Register new account'
      description: 'Register new account'
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          description: "Information new account"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/RequestRegister"
      responses:
        '200':
          description: Register new account'.
          schema:
            type: object
            properties:
              is_success:
                type: boolean
                example: true
              message:
                type: string
                example: 'User Registered'
              data:
                type: object
                items:
                  $ref: '#/components/schemas/Register'
  /api/logout:
    post:
      tags:
        - Authenticate
      summary: 'Logout'
      description: 'Logout'
      produces:
        - application/json
      responses:
        '200':
          description: Logout'.
          schema:
            type: object
            properties:
              is_success:
                type: boolean
                example: true
              message:
                type: string
                example: 'Logged out'

components:
  schemas:
    Apartment:
      type: object
      properties:
        apartment_id:
          type: string
          example: "P101"
        floor:
          type: number
          example: 1
        status:
          type: number
          example: 1
        description:
          type: string
          example: "Phong 2 ban cong"
        square_meters:
          type: number
          example: 50
        type_apartment:
          type: number
          example: 1
      xml:
        name: Apartment
    ApartmentById:
      type: object
      properties:
        apartment_id:
          type: string
          example: "P101"
        floor:
          type: number
          example: 1
        status:
          type: number
          example: 1
        description:
          type: string
          example: "Phong 1 ban cong"
        square_meters:
          type: number
          example: 50
        type_apartment:
          type: number
          example: 1
      xml:
        name: Apartment
    Service:
      type: object
      properties:
        name:
          type: string
          example: "Tien dien"
        price:
          type: number
          example: 150000
        description:
          type: string
          example: "Tien dien thang 1/2022"
      xml:
        name: Service
    NewService:
      type: object
      properties:
        name:
          type: string
          example: "Tien nuoc"
        price:
          type: number
          example: 50000
        description:
          type: string
          example: "Tien nuoc thang 1/2022"
      xml:
        name: Service
    Login:
      type: object
      properties:
        token:
          type: string
          example: "28|QgGSL8vv33zKmWDHd07Y6vOur7lfixfEtEzTnWM0"
        apartment_id:
          type: string
          example: "P300"
        floor:
          type: number
          example: 1
        status:
          type: number
          example: 0
        description:
          type: string
          example: "Phòng rộng"
        square_meters:
          type: number
          example: 60
        type_apartment:
          type: number
          example: 1
        tower:
          type: string
          expamle: "P"
        user_id:
          type: number
          example: 1
      xml:
        name: Login
    LoginFail:
      type: object
      properties:
    RequestRegister:
      type: object
      properties:
        user_name:
          type: string
          example: "ty5"
        email:
          type: string
          example: "ty5@gmail.com"
        name:
          type: string
          example: "Duc Anh"
        password:
          type: string
          example: "123456"
        password_comfirmation:
          type: string
          example: "123456"
        apartment_id:
          type: number
          example: 1
        role:
          type: number
          example: 1
      xml:
        name: RequestRegister
    Register:
      type: object
      properties:
        token:
          type: string
          example: "7|OZ6J1PNvifzScSlKCCOXL743AF0mSxOEjkTfyVZo"
        user:
          type: object
          properties:
            user_name:
              type: string
              example: "ty5"
            email:
              type: string
              example: "ty5@gmail.com"
            name:
              type: string
              example: "Duc Anh"
            apartment_id:
              type: number
              example: 1
            role:
              type: number
              example: 1
            created_at:
              type: datetime
              example: "2022-01-20T06:03:10.000000Z"
            updated_at:
              type: datetime
              example: "2022-01-20T06:03:10.000000Z"
      xml:
        name: Register
